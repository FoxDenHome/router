*mangle
:POSTROUTING ACCEPT [0:0]
{% for rule in RULES if rule.actions.mangle is defined %}
{{ caller.make_rules(rule, rule.actions.mangle, "POSTROUTING", caller.V4ONLY) }}
{% endfor %}

COMMIT



*nat
:PREROUTING ACCEPT [0:0]
{% for rule in RULES if rule.actions.nat is defined and rule.actions.nat == "DNAT" %}
{{ caller.make_rules(rule, rule.actions.nat, "PREROUTING", caller.V4ONLY) }}
{% endfor %}

:INPUT ACCEPT [0:0]

:OUTPUT ACCEPT [0:0]

:POSTROUTING ACCEPT [0:0]
{% for rule in RULES if rule.actions.nat is defined and rule.actions.nat != "DNAT" %}
{{ caller.make_rules(rule, rule.actions.nat, "POSTROUTING", caller.V4ONLY) }}
{% endfor %}

COMMIT



*filter
:INPUT DROP [0:0]
-A INPUT -m state --state related,established -j ACCEPT
-A INPUT -i lo -j ACCEPT
{% for rule in RULES if rule.actions.filter is defined and rule.to.local %}
{{ caller.make_rules(rule, rule.actions.filter, "INPUT", caller.V4ONLY) }}
{% endfor %}

:FORWARD DROP [0:0]
-A FORWARD -m state --state related,established -j ACCEPT
{% for rule in RULES if rule.actions.filter is defined and not rule.to.local %}
{{ caller.make_rules(rule, rule.actions.filter, "FORWARD", caller.V4ONLY) }}
{% endfor %}

:OUTPUT ACCEPT [0:0]

COMMIT
